[{"chapter":"1","summary":"gemini081501-04. 이제 한글 표시가 제대로 되네.                                      그런데, 창을 추가하는 '^' 'v' 버튼은 동작이 되질 않고 있네.","details":"### 🔋 081501-04. 맞습니다. ^와 v 버튼의 기능은\n아직 구현되지 않았습니다. 다음은 ^와 v 버튼의 기능을 구현하는 방법입니다.\n\n### 1. HTML 구조 변경\n\n챕터 추가 기능을 구현하기 위해 각 챕터를 감싸는 컨테이너 요소를 추가합니다. `popup.html` 파일을 다음과 같이 수정합니다.\n\n```HTML\n<!-- gemini08.1501-04. popup.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown Note+</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        .chapter-container { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }\n        textarea { width: 100%; height: 200px; box-sizing: border-box; }\n    </style>\n</head>\n<body>\n    <div class=\"chapter-container\">\n        <input type=\"number\" class=\"chapter-number\" value=\"1\">\n        <button class=\"increase\">+</button>\n        <button class=\"decrease\">-</button>\n        <button class=\"add-above\">^</button>\n        <button class=\"add-below\">v</button>\n        <br>\n        <textarea class=\"summary\"></textarea>\n        <textarea class=\"details\"></textarea>\n    </div>\n    <br>\n    <button id=\"save\">저장</button>\n    <button id=\"load\">불러오기</button>\n    <script src=\"jpopup.js\"></script>\n</body>\n</html>\n```\n\n### 2. JavaScript 코드 수정\n\n`jpopup.js` 파일을 다음과 같이 수정합니다.\n\n```JavaScript\n// gemini08.1501-04. jpopup.js -->\ndocument.addEventListener('DOMContentLoaded', function() {\n    const saveButton = document.getElementById('save');\n    const loadButton = document.getElementById('load');\n\n    // 이벤트 위임\n    document.body.addEventListener('click', function(event) {\n        const target = event.target;\n        const chapterContainer = target.closest('.chapter-container');\n\n        if (target.classList.contains('increase')) {\n            increaseChapterNumber(chapterContainer);\n        } else if (target.classList.contains('decrease')) {\n            decreaseChapterNumber(chapterContainer);\n        } else if (target.classList.contains('add-above')) {\n            addChapterAbove(chapterContainer);\n        } else if (target.classList.contains('add-below')) {\n            addChapterBelow(chapterContainer);\n        }\n    });\n\n    // 숫자 증감 기능\n    function increaseChapterNumber(container) {\n        const chapterNumber = container.querySelector('.chapter-number');\n        chapterNumber.value = parseInt(chapterNumber.value) + 1;\n    }\n\n    function decreaseChapterNumber(container) {\n        const chapterNumber = container.querySelector('.chapter-number');\n        chapterNumber.value = parseInt(chapterNumber.value) - 1;\n    }\n\n    // 챕터 추가 기능 (^, v)\n    function addChapterAbove(container) {\n        const newChapter = createChapter();\n        container.parentNode.insertBefore(newChapter, container);\n    }\n\n    function addChapterBelow(container) {\n        const newChapter = createChapter();\n        container.parentNode.insertBefore(newChapter, container.nextSibling);\n    }\n\n    // 새로운 챕터 생성 함수\n    function createChapter() {\n        const newChapter = document.createElement('div');\n        newChapter.classList.add('chapter-container');\n        newChapter.innerHTML = `\n            <input type=\"number\" class=\"chapter-number\" value=\"1\">\n            <button class=\"increase\">+</button>\n            <button class=\"decrease\">-</button>\n            <button class=\"add-above\">^</button>\n            <button class=\"add-below\">v</button>\n            <br>\n            <textarea class=\"summary\"></textarea>\n            <textarea class=\"details\"></textarea>\n        `;\n        return newChapter;\n    }\n\n    // 저장 기능\n    saveButton.addEventListener('click', function() {\n        const chapters = [];\n        document.querySelectorAll('.chapter-container').forEach(container => {\n            const chapter = {\n                chapter: container.querySelector('.chapter-number').value,\n                summary: container.querySelector('.summary').value,\n                details: container.querySelector('.details').value\n            };\n            chapters.push(chapter);\n        });\n        const filename = 'markdown_notes.json';\n        saveFile(JSON.stringify(chapters), filename);\n    });\n\n    // 불러오기 기능\n    loadButton.addEventListener('click', function() {\n        loadFile(function(content) {\n            const chapters = JSON.parse(content);\n            const container = document.querySelector('.chapter-container').parentNode;\n            container.innerHTML = ''; // 기존 챕터 삭제\n            chapters.forEach(chapter => {\n                const newChapter = createChapter();\n                newChapter.querySelector('.chapter-number').value = chapter.chapter;\n                newChapter.querySelector('.summary').value = chapter.summary;\n                newChapter.querySelector('.details').value = chapter.details;\n                container.appendChild(newChapter);\n            });\n        });\n    });\n\n    // 파일 저장 함수\n    function saveFile(content, filename) {\n        const blob = new Blob([content], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n\n    // 파일 불러오기 함수\n    function loadFile(callback) {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/json';\n        input.onchange = function(event) {\n            const file = event.target.files[0];\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                callback(e.target.result);\n            };\n            reader.readAsText(file);\n        };\n        input.click();\n    }\n});\n```\n\n### 3. 크롬 확장 프로그램 재로드\n\n`chrome://extensions/` 페이지에서 \"개발자 모드\"를 활성화하고, \"압축해제된 확장 프로그램을 로드합니다.\" 버튼을 클릭하여 수정된 폴더를 다시 로드합니다.\n\n위 코드를 적용하면 `^`와 `v` 버튼을 사용하여 챕터를 추가하고, 저장 및 불러오기 기능도 정상적으로 작동합니다.\n"}]